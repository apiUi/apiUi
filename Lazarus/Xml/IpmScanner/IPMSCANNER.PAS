
{
    This file is part of the apiUi project
    Copyright (c) 2009-2021 by Jan Bouwman

    See the file COPYING.FPC, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

}
unit IpmScanner;

interface
uses CustScanner, Classes, IpmParser;

type TIpmScanner = class (TCustScanner)
published
  property OnNeedData: TOnNeedDataEvent read FOnNeedData write FOnNeedData;
  property OnOutput: TNotifyEvent read FOnOutput write FOnOutput;
  property OnEcho: TNotifyEvent read FOnEcho write FOnEcho;
  property OnDefaultAction: TNotifyEvent read FOnDefaultAction write FOnDefaultAction;
  property OnError: TOnScannerErrorEvent read FOnError write FOnError;
public
  function yylex: Integer; override;
end;

implementation
  uses SysUtils;

const InitState = 2;
const PicState = 4;


function TIpmScanner.yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)

begin
  (* actions: *)
  case yyruleno of
  1:
                                             return (_TERMINATOR);
  2:
                                             return (_NOID);
  3:
                                             begin
                                               start (PicState);
                                               return (_PICTURE);
                                             end;
  4:
                                             begin
                                               start (InitState);
                                               return (_PICTURECLAUSE);
                                             end;
  5:
                                             return (_CONDITIONLEVEL);
  6:
                                             return (_NOID);
  7:
                                             return (_STRING);
  8:
                                             return (_INTEGER);
  9:
                                             return (_IGNORE);

  10:
                                             return (_IGNORE);
  11:
                                             return (_IGNORE);
  12:
                                             return (_IGNORE);
  13:
                                             return (_IGNORE);

  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 54;
yynmatches = 54;
yyntrans   = 129;
yynstates  = 57;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  { 3: }
  { 4: }
  { 5: }
  { 6: }
  12,
  { 7: }
  13,
  { 8: }
  12,
  { 9: }
  12,
  { 10: }
  12,
  { 11: }
  12,
  { 12: }
  1,
  12,
  { 13: }
  2,
  6,
  12,
  { 14: }
  2,
  6,
  12,
  { 15: }
  12,
  { 16: }
  12,
  { 17: }
  8,
  12,
  { 18: }
  9,
  12,
  { 19: }
  12,
  { 20: }
  8,
  12,
  { 21: }
  12,
  { 22: }
  4,
  12,
  { 23: }
  { 24: }
  10,
  { 25: }
  { 26: }
  10,
  11,
  { 27: }
  { 28: }
  11,
  { 29: }
  2,
  6,
  { 30: }
  2,
  6,
  { 31: }
  { 32: }
  { 33: }
  7,
  { 34: }
  { 35: }
  { 36: }
  7,
  { 37: }
  8,
  { 38: }
  { 39: }
  { 40: }
  8,
  { 41: }
  4,
  { 42: }
  2,
  6,
  { 43: }
  { 44: }
  { 45: }
  { 46: }
  5,
  { 47: }
  2,
  6,
  { 48: }
  3,
  { 49: }
  7,
  { 50: }
  7,
  { 51: }
  2,
  6,
  { 52: }
  { 53: }
  2,
  6,
  { 54: }
  { 55: }
  2,
  6,
  { 56: }
  3
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
{ 3: }
{ 4: }
{ 5: }
{ 6: }
  12,
{ 7: }
  13,
{ 8: }
  12,
{ 9: }
  12,
{ 10: }
  12,
{ 11: }
  12,
{ 12: }
  1,
  12,
{ 13: }
  2,
  6,
  12,
{ 14: }
  2,
  6,
  12,
{ 15: }
  12,
{ 16: }
  12,
{ 17: }
  8,
  12,
{ 18: }
  9,
  12,
{ 19: }
  12,
{ 20: }
  8,
  12,
{ 21: }
  12,
{ 22: }
  4,
  12,
{ 23: }
{ 24: }
  10,
{ 25: }
{ 26: }
  10,
  11,
{ 27: }
{ 28: }
  11,
{ 29: }
  2,
  6,
{ 30: }
  2,
  6,
{ 31: }
{ 32: }
{ 33: }
  7,
{ 34: }
{ 35: }
{ 36: }
  7,
{ 37: }
  8,
{ 38: }
{ 39: }
{ 40: }
  8,
{ 41: }
  4,
{ 42: }
  2,
  6,
{ 43: }
{ 44: }
{ 45: }
{ 46: }
  5,
{ 47: }
  2,
  6,
{ 48: }
  3,
{ 49: }
  7,
{ 50: }
  7,
{ 51: }
  2,
  6,
{ 52: }
{ 53: }
  2,
  6,
{ 54: }
{ 55: }
  2,
  6,
{ 56: }
  3
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11..#255 ]; s: 6),
  ( cc: [ #10 ]; s: 7),
{ 1: }
  ( cc: [ #1..#9,#11..#31,'!'..')','+'..'.','0'..'>',
            '@'..#255 ]; s: 6),
  ( cc: [ #10 ]; s: 7),
  ( cc: [ ' ' ]; s: 10),
  ( cc: [ '*' ]; s: 11),
  ( cc: [ '/' ]; s: 9),
  ( cc: [ '?' ]; s: 8),
{ 2: }
  ( cc: [ #1..#9,#11..'!','#'..'&','('..'+','-','/',
            ':'..'@','['..'`','{'..#255 ]; s: 6),
  ( cc: [ #10 ]; s: 7),
  ( cc: [ '"' ]; s: 15),
  ( cc: [ '''' ]; s: 16),
  ( cc: [ ',' ]; s: 18),
  ( cc: [ '.' ]; s: 12),
  ( cc: [ '0'..'9' ]; s: 17),
  ( cc: [ 'A'..'O','Q'..'Z','a'..'o','q'..'z' ]; s: 13),
  ( cc: [ 'P','p' ]; s: 14),
{ 3: }
  ( cc: [ #1..#8,#11,#13..#31,'!','#'..'&','(',')',
            '+','-',':'..'>','@','['..'`','{'..#255 ]; s: 6),
  ( cc: [ #9,#12 ]; s: 19),
  ( cc: [ #10 ]; s: 7),
  ( cc: [ ' ' ]; s: 21),
  ( cc: [ '"' ]; s: 15),
  ( cc: [ '''' ]; s: 16),
  ( cc: [ '*' ]; s: 11),
  ( cc: [ ',' ]; s: 18),
  ( cc: [ '.' ]; s: 12),
  ( cc: [ '/' ]; s: 9),
  ( cc: [ '0'..'7','9' ]; s: 17),
  ( cc: [ '8' ]; s: 20),
  ( cc: [ '?' ]; s: 8),
  ( cc: [ 'A'..'O','Q'..'Z','a'..'o','q'..'z' ]; s: 13),
  ( cc: [ 'P','p' ]; s: 14),
{ 4: }
  ( cc: [ #1..#9,#11..'''','*',',','.','/',':'..'@',
            'C'..'M','O','Q','R','T','U','W','Y','['..'`',
            'c'..'m','o','q','r','t','u','w','y','{'..#255 ]; s: 6),
  ( cc: [ #10 ]; s: 7),
  ( cc: [ '(',')','+','-','0'..'9','A','B','N','P',
            'S','V','X','Z','a','b','n','p','s','v','x',
            'z' ]; s: 22),
{ 5: }
  ( cc: [ #1..#9,#11..#31,'!'..'''',',','.',':'..'>',
            '@','C'..'M','O','Q','R','T','U','W','Y',
            '['..'`','c'..'m','o','q','r','t','u','w',
            'y','{'..#255 ]; s: 6),
  ( cc: [ #10 ]; s: 7),
  ( cc: [ ' ' ]; s: 10),
  ( cc: [ '(',')','+','-','0'..'9','A','B','N','P',
            'S','V','X','Z','a','b','n','p','s','v','x',
            'z' ]; s: 22),
  ( cc: [ '*' ]; s: 11),
  ( cc: [ '/' ]; s: 9),
  ( cc: [ '?' ]; s: 8),
{ 6: }
{ 7: }
{ 8: }
  ( cc: [ #1..#9,#11..#255 ]; s: 23),
  ( cc: [ #10 ]; s: 24),
{ 9: }
  ( cc: [ #1..#9,#11..#255 ]; s: 25),
  ( cc: [ #10 ]; s: 26),
{ 10: }
  ( cc: [ '*','/' ]; s: 27),
{ 11: }
  ( cc: [ #1..#9,#11..#255 ]; s: 27),
  ( cc: [ #10 ]; s: 28),
{ 12: }
{ 13: }
  ( cc: [ '-','0'..'9','A'..'Z','_','a'..'z' ]; s: 29),
{ 14: }
  ( cc: [ '-','0'..'9','A'..'H','J'..'Z','_','a'..'h',
            'j'..'z' ]; s: 29),
  ( cc: [ 'I','i' ]; s: 30),
{ 15: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 31),
  ( cc: [ #10 ]; s: 32),
  ( cc: [ '"' ]; s: 33),
{ 16: }
  ( cc: [ #1..#9,#11..'&','('..#255 ]; s: 34),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '''' ]; s: 36),
{ 17: }
  ( cc: [ '0'..'9' ]; s: 37),
{ 18: }
{ 19: }
  ( cc: [ #9,#12,' ' ]; s: 38),
  ( cc: [ '8' ]; s: 39),
{ 20: }
  ( cc: [ '0'..'7','9' ]; s: 37),
  ( cc: [ '8' ]; s: 40),
{ 21: }
  ( cc: [ #9,#12,' ' ]; s: 38),
  ( cc: [ '*','/' ]; s: 27),
  ( cc: [ '8' ]; s: 39),
{ 22: }
  ( cc: [ '(',')','+','-','0'..'9','A','B','N','P',
            'S','V','X','Z','a','b','n','p','s','v','x',
            'z' ]; s: 41),
{ 23: }
  ( cc: [ #1..#9,#11..#255 ]; s: 23),
  ( cc: [ #10 ]; s: 24),
{ 24: }
{ 25: }
  ( cc: [ #1..#9,#11..#255 ]; s: 25),
  ( cc: [ #10 ]; s: 26),
{ 26: }
{ 27: }
  ( cc: [ #1..#9,#11..#255 ]; s: 27),
  ( cc: [ #10 ]; s: 28),
{ 28: }
{ 29: }
  ( cc: [ '-','0'..'9','A'..'Z','_','a'..'z' ]; s: 29),
{ 30: }
  ( cc: [ '-','0'..'9','A','B','D'..'Z','_','a','b',
            'd'..'z' ]; s: 29),
  ( cc: [ 'C','c' ]; s: 42),
{ 31: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 31),
  ( cc: [ #10 ]; s: 32),
  ( cc: [ '"' ]; s: 33),
{ 32: }
  ( cc: [ #1..#9,#11..'!','#'..',','.'..#255 ]; s: 31),
  ( cc: [ #10 ]; s: 32),
  ( cc: [ '"' ]; s: 33),
  ( cc: [ '-' ]; s: 43),
{ 33: }
  ( cc: [ '"' ]; s: 31),
{ 34: }
  ( cc: [ #1..#9,#11..'&','('..#255 ]; s: 34),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '''' ]; s: 36),
{ 35: }
  ( cc: [ #1..#9,#11..'&','('..',','.'..#255 ]; s: 34),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '''' ]; s: 36),
  ( cc: [ '-' ]; s: 44),
{ 36: }
  ( cc: [ '''' ]; s: 34),
{ 37: }
  ( cc: [ '0'..'9' ]; s: 37),
{ 38: }
  ( cc: [ #9,#12,' ' ]; s: 38),
  ( cc: [ '8' ]; s: 39),
{ 39: }
  ( cc: [ '8' ]; s: 45),
{ 40: }
  ( cc: [ #9,#12,' ' ]; s: 46),
  ( cc: [ '0'..'9' ]; s: 37),
{ 41: }
  ( cc: [ '(',')','+','-','0'..'9','A','B','N','P',
            'S','V','X','Z','a','b','n','p','s','v','x',
            'z' ]; s: 41),
{ 42: }
  ( cc: [ #9,#12,' ' ]; s: 48),
  ( cc: [ '-','0'..'9','A'..'S','U'..'Z','_','a'..'s',
            'u'..'z' ]; s: 29),
  ( cc: [ 'T','t' ]; s: 47),
{ 43: }
  ( cc: [ #1..#8,#11,#13..#31,'!','#'..#255 ]; s: 31),
  ( cc: [ #9,#12,' ' ]; s: 43),
  ( cc: [ #10 ]; s: 32),
  ( cc: [ '"' ]; s: 49),
{ 44: }
  ( cc: [ #1..#8,#11,#13..#31,'!'..'&','('..#255 ]; s: 34),
  ( cc: [ #9,#12,' ' ]; s: 44),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '''' ]; s: 50),
{ 45: }
  ( cc: [ #9,#12,' ' ]; s: 46),
{ 46: }
  ( cc: [ #9,#12,' ' ]; s: 46),
{ 47: }
  ( cc: [ '-','0'..'9','A'..'T','V'..'Z','_','a'..'t',
            'v'..'z' ]; s: 29),
  ( cc: [ 'U','u' ]; s: 51),
{ 48: }
  ( cc: [ 'I','i' ]; s: 52),
{ 49: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 31),
  ( cc: [ #10 ]; s: 32),
  ( cc: [ '"' ]; s: 49),
{ 50: }
  ( cc: [ #1..#9,#11..'&','('..#255 ]; s: 34),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '''' ]; s: 50),
{ 51: }
  ( cc: [ '-','0'..'9','A'..'Q','S'..'Z','_','a'..'q',
            's'..'z' ]; s: 29),
  ( cc: [ 'R','r' ]; s: 53),
{ 52: }
  ( cc: [ 'S','s' ]; s: 54),
{ 53: }
  ( cc: [ '-','0'..'9','A'..'D','F'..'Z','_','a'..'d',
            'f'..'z' ]; s: 29),
  ( cc: [ 'E','e' ]; s: 55),
{ 54: }
  ( cc: [ #9,#12,' ' ]; s: 56),
{ 55: }
  ( cc: [ #9,#12,' ' ]; s: 48),
  ( cc: [ '-','0'..'9','A'..'Z','_','a'..'z' ]; s: 29)
{ 56: }
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 2,
{ 8: } 3,
{ 9: } 4,
{ 10: } 5,
{ 11: } 6,
{ 12: } 7,
{ 13: } 9,
{ 14: } 12,
{ 15: } 15,
{ 16: } 16,
{ 17: } 17,
{ 18: } 19,
{ 19: } 21,
{ 20: } 22,
{ 21: } 24,
{ 22: } 25,
{ 23: } 27,
{ 24: } 27,
{ 25: } 28,
{ 26: } 28,
{ 27: } 30,
{ 28: } 30,
{ 29: } 31,
{ 30: } 33,
{ 31: } 35,
{ 32: } 35,
{ 33: } 35,
{ 34: } 36,
{ 35: } 36,
{ 36: } 36,
{ 37: } 37,
{ 38: } 38,
{ 39: } 38,
{ 40: } 38,
{ 41: } 39,
{ 42: } 40,
{ 43: } 42,
{ 44: } 42,
{ 45: } 42,
{ 46: } 42,
{ 47: } 43,
{ 48: } 45,
{ 49: } 46,
{ 50: } 47,
{ 51: } 48,
{ 52: } 50,
{ 53: } 50,
{ 54: } 52,
{ 55: } 52,
{ 56: } 54
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 1,
{ 7: } 2,
{ 8: } 3,
{ 9: } 4,
{ 10: } 5,
{ 11: } 6,
{ 12: } 8,
{ 13: } 11,
{ 14: } 14,
{ 15: } 15,
{ 16: } 16,
{ 17: } 18,
{ 18: } 20,
{ 19: } 21,
{ 20: } 23,
{ 21: } 24,
{ 22: } 26,
{ 23: } 26,
{ 24: } 27,
{ 25: } 27,
{ 26: } 29,
{ 27: } 29,
{ 28: } 30,
{ 29: } 32,
{ 30: } 34,
{ 31: } 34,
{ 32: } 34,
{ 33: } 35,
{ 34: } 35,
{ 35: } 35,
{ 36: } 36,
{ 37: } 37,
{ 38: } 37,
{ 39: } 37,
{ 40: } 38,
{ 41: } 39,
{ 42: } 41,
{ 43: } 41,
{ 44: } 41,
{ 45: } 41,
{ 46: } 42,
{ 47: } 44,
{ 48: } 45,
{ 49: } 46,
{ 50: } 47,
{ 51: } 49,
{ 52: } 49,
{ 53: } 51,
{ 54: } 51,
{ 55: } 53,
{ 56: } 54
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 2,
{ 8: } 3,
{ 9: } 4,
{ 10: } 5,
{ 11: } 6,
{ 12: } 7,
{ 13: } 9,
{ 14: } 12,
{ 15: } 15,
{ 16: } 16,
{ 17: } 17,
{ 18: } 19,
{ 19: } 21,
{ 20: } 22,
{ 21: } 24,
{ 22: } 25,
{ 23: } 27,
{ 24: } 27,
{ 25: } 28,
{ 26: } 28,
{ 27: } 30,
{ 28: } 30,
{ 29: } 31,
{ 30: } 33,
{ 31: } 35,
{ 32: } 35,
{ 33: } 35,
{ 34: } 36,
{ 35: } 36,
{ 36: } 36,
{ 37: } 37,
{ 38: } 38,
{ 39: } 38,
{ 40: } 38,
{ 41: } 39,
{ 42: } 40,
{ 43: } 42,
{ 44: } 42,
{ 45: } 42,
{ 46: } 42,
{ 47: } 43,
{ 48: } 45,
{ 49: } 46,
{ 50: } 47,
{ 51: } 48,
{ 52: } 50,
{ 53: } 50,
{ 54: } 52,
{ 55: } 52,
{ 56: } 54
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 1,
{ 7: } 2,
{ 8: } 3,
{ 9: } 4,
{ 10: } 5,
{ 11: } 6,
{ 12: } 8,
{ 13: } 11,
{ 14: } 14,
{ 15: } 15,
{ 16: } 16,
{ 17: } 18,
{ 18: } 20,
{ 19: } 21,
{ 20: } 23,
{ 21: } 24,
{ 22: } 26,
{ 23: } 26,
{ 24: } 27,
{ 25: } 27,
{ 26: } 29,
{ 27: } 29,
{ 28: } 30,
{ 29: } 32,
{ 30: } 34,
{ 31: } 34,
{ 32: } 34,
{ 33: } 35,
{ 34: } 35,
{ 35: } 35,
{ 36: } 36,
{ 37: } 37,
{ 38: } 37,
{ 39: } 37,
{ 40: } 38,
{ 41: } 39,
{ 42: } 41,
{ 43: } 41,
{ 44: } 41,
{ 45: } 41,
{ 46: } 42,
{ 47: } 44,
{ 48: } 45,
{ 49: } 46,
{ 50: } 47,
{ 51: } 49,
{ 52: } 49,
{ 53: } 51,
{ 54: } 51,
{ 55: } 53,
{ 56: } 54
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 3,
{ 2: } 9,
{ 3: } 18,
{ 4: } 33,
{ 5: } 36,
{ 6: } 43,
{ 7: } 43,
{ 8: } 43,
{ 9: } 45,
{ 10: } 47,
{ 11: } 48,
{ 12: } 50,
{ 13: } 50,
{ 14: } 51,
{ 15: } 53,
{ 16: } 56,
{ 17: } 59,
{ 18: } 60,
{ 19: } 60,
{ 20: } 62,
{ 21: } 64,
{ 22: } 67,
{ 23: } 68,
{ 24: } 70,
{ 25: } 70,
{ 26: } 72,
{ 27: } 72,
{ 28: } 74,
{ 29: } 74,
{ 30: } 75,
{ 31: } 77,
{ 32: } 80,
{ 33: } 84,
{ 34: } 85,
{ 35: } 88,
{ 36: } 92,
{ 37: } 93,
{ 38: } 94,
{ 39: } 96,
{ 40: } 97,
{ 41: } 99,
{ 42: } 100,
{ 43: } 103,
{ 44: } 107,
{ 45: } 111,
{ 46: } 112,
{ 47: } 113,
{ 48: } 115,
{ 49: } 116,
{ 50: } 119,
{ 51: } 122,
{ 52: } 124,
{ 53: } 125,
{ 54: } 127,
{ 55: } 128,
{ 56: } 130
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 2,
{ 1: } 8,
{ 2: } 17,
{ 3: } 32,
{ 4: } 35,
{ 5: } 42,
{ 6: } 42,
{ 7: } 42,
{ 8: } 44,
{ 9: } 46,
{ 10: } 47,
{ 11: } 49,
{ 12: } 49,
{ 13: } 50,
{ 14: } 52,
{ 15: } 55,
{ 16: } 58,
{ 17: } 59,
{ 18: } 59,
{ 19: } 61,
{ 20: } 63,
{ 21: } 66,
{ 22: } 67,
{ 23: } 69,
{ 24: } 69,
{ 25: } 71,
{ 26: } 71,
{ 27: } 73,
{ 28: } 73,
{ 29: } 74,
{ 30: } 76,
{ 31: } 79,
{ 32: } 83,
{ 33: } 84,
{ 34: } 87,
{ 35: } 91,
{ 36: } 92,
{ 37: } 93,
{ 38: } 95,
{ 39: } 96,
{ 40: } 98,
{ 41: } 99,
{ 42: } 102,
{ 43: } 106,
{ 44: } 110,
{ 45: } 111,
{ 46: } 112,
{ 47: } 114,
{ 48: } 115,
{ 49: } 118,
{ 50: } 121,
{ 51: } 123,
{ 52: } 124,
{ 53: } 126,
{ 54: } 127,
{ 55: } 129,
{ 56: } 129
);


var yyn : Integer;

label startlabel, scan, action;

begin

startlabel:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      return (0);
    end;

  if not yydone then goto startlabel;

  yylex := FToken;

end(*yylex*);


end.
