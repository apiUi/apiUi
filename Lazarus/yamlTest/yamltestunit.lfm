object Form1: TForm1
  Left = 288
  Height = 776
  Top = 132
  Width = 1371
  Caption = 'Form1'
  ClientHeight = 776
  ClientWidth = 1371
  OnCreate = FormCreate
  OnDestroy = FormDestroy
  OnShow = FormShow
  LCLVersion = '1.6.0.4'
  inline SynEdit: TSynEdit
    Left = 16
    Height = 376
    Top = 8
    Width = 1248
    Font.Height = -13
    Font.Name = 'Courier New'
    Font.Pitch = fpFixed
    Font.Quality = fqNonAntialiased
    ParentColor = False
    ParentFont = False
    TabOrder = 0
    Gutter.Width = 65
    Gutter.MouseActions = <>
    RightGutter.Width = 0
    RightGutter.MouseActions = <>
    Keystrokes = <    
      item
        Command = ecUp
        ShortCut = 38
      end    
      item
        Command = ecSelUp
        ShortCut = 8230
      end    
      item
        Command = ecScrollUp
        ShortCut = 16422
      end    
      item
        Command = ecDown
        ShortCut = 40
      end    
      item
        Command = ecSelDown
        ShortCut = 8232
      end    
      item
        Command = ecScrollDown
        ShortCut = 16424
      end    
      item
        Command = ecLeft
        ShortCut = 37
      end    
      item
        Command = ecSelLeft
        ShortCut = 8229
      end    
      item
        Command = ecWordLeft
        ShortCut = 16421
      end    
      item
        Command = ecSelWordLeft
        ShortCut = 24613
      end    
      item
        Command = ecRight
        ShortCut = 39
      end    
      item
        Command = ecSelRight
        ShortCut = 8231
      end    
      item
        Command = ecWordRight
        ShortCut = 16423
      end    
      item
        Command = ecSelWordRight
        ShortCut = 24615
      end    
      item
        Command = ecPageDown
        ShortCut = 34
      end    
      item
        Command = ecSelPageDown
        ShortCut = 8226
      end    
      item
        Command = ecPageBottom
        ShortCut = 16418
      end    
      item
        Command = ecSelPageBottom
        ShortCut = 24610
      end    
      item
        Command = ecPageUp
        ShortCut = 33
      end    
      item
        Command = ecSelPageUp
        ShortCut = 8225
      end    
      item
        Command = ecPageTop
        ShortCut = 16417
      end    
      item
        Command = ecSelPageTop
        ShortCut = 24609
      end    
      item
        Command = ecLineStart
        ShortCut = 36
      end    
      item
        Command = ecSelLineStart
        ShortCut = 8228
      end    
      item
        Command = ecEditorTop
        ShortCut = 16420
      end    
      item
        Command = ecSelEditorTop
        ShortCut = 24612
      end    
      item
        Command = ecLineEnd
        ShortCut = 35
      end    
      item
        Command = ecSelLineEnd
        ShortCut = 8227
      end    
      item
        Command = ecEditorBottom
        ShortCut = 16419
      end    
      item
        Command = ecSelEditorBottom
        ShortCut = 24611
      end    
      item
        Command = ecToggleMode
        ShortCut = 45
      end    
      item
        Command = ecCopy
        ShortCut = 16429
      end    
      item
        Command = ecPaste
        ShortCut = 8237
      end    
      item
        Command = ecDeleteChar
        ShortCut = 46
      end    
      item
        Command = ecCut
        ShortCut = 8238
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8200
      end    
      item
        Command = ecDeleteLastWord
        ShortCut = 16392
      end    
      item
        Command = ecUndo
        ShortCut = 32776
      end    
      item
        Command = ecRedo
        ShortCut = 40968
      end    
      item
        Command = ecLineBreak
        ShortCut = 13
      end    
      item
        Command = ecSelectAll
        ShortCut = 16449
      end    
      item
        Command = ecCopy
        ShortCut = 16451
      end    
      item
        Command = ecBlockIndent
        ShortCut = 24649
      end    
      item
        Command = ecLineBreak
        ShortCut = 16461
      end    
      item
        Command = ecInsertLine
        ShortCut = 16462
      end    
      item
        Command = ecDeleteWord
        ShortCut = 16468
      end    
      item
        Command = ecBlockUnindent
        ShortCut = 24661
      end    
      item
        Command = ecPaste
        ShortCut = 16470
      end    
      item
        Command = ecCut
        ShortCut = 16472
      end    
      item
        Command = ecDeleteLine
        ShortCut = 16473
      end    
      item
        Command = ecDeleteEOL
        ShortCut = 24665
      end    
      item
        Command = ecUndo
        ShortCut = 16474
      end    
      item
        Command = ecRedo
        ShortCut = 24666
      end    
      item
        Command = ecGotoMarker0
        ShortCut = 16432
      end    
      item
        Command = ecGotoMarker1
        ShortCut = 16433
      end    
      item
        Command = ecGotoMarker2
        ShortCut = 16434
      end    
      item
        Command = ecGotoMarker3
        ShortCut = 16435
      end    
      item
        Command = ecGotoMarker4
        ShortCut = 16436
      end    
      item
        Command = ecGotoMarker5
        ShortCut = 16437
      end    
      item
        Command = ecGotoMarker6
        ShortCut = 16438
      end    
      item
        Command = ecGotoMarker7
        ShortCut = 16439
      end    
      item
        Command = ecGotoMarker8
        ShortCut = 16440
      end    
      item
        Command = ecGotoMarker9
        ShortCut = 16441
      end    
      item
        Command = ecSetMarker0
        ShortCut = 24624
      end    
      item
        Command = ecSetMarker1
        ShortCut = 24625
      end    
      item
        Command = ecSetMarker2
        ShortCut = 24626
      end    
      item
        Command = ecSetMarker3
        ShortCut = 24627
      end    
      item
        Command = ecSetMarker4
        ShortCut = 24628
      end    
      item
        Command = ecSetMarker5
        ShortCut = 24629
      end    
      item
        Command = ecSetMarker6
        ShortCut = 24630
      end    
      item
        Command = ecSetMarker7
        ShortCut = 24631
      end    
      item
        Command = ecSetMarker8
        ShortCut = 24632
      end    
      item
        Command = ecSetMarker9
        ShortCut = 24633
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41009
      end    
      item
        Command = EcFoldLevel2
        ShortCut = 41010
      end    
      item
        Command = EcFoldLevel3
        ShortCut = 41011
      end    
      item
        Command = EcFoldLevel4
        ShortCut = 41012
      end    
      item
        Command = EcFoldLevel5
        ShortCut = 41013
      end    
      item
        Command = EcFoldLevel6
        ShortCut = 41014
      end    
      item
        Command = EcFoldLevel7
        ShortCut = 41015
      end    
      item
        Command = EcFoldLevel8
        ShortCut = 41016
      end    
      item
        Command = EcFoldLevel9
        ShortCut = 41017
      end    
      item
        Command = EcFoldLevel0
        ShortCut = 41008
      end    
      item
        Command = EcFoldCurrent
        ShortCut = 41005
      end    
      item
        Command = EcUnFoldCurrent
        ShortCut = 41003
      end    
      item
        Command = EcToggleMarkupWord
        ShortCut = 32845
      end    
      item
        Command = ecNormalSelect
        ShortCut = 24654
      end    
      item
        Command = ecColumnSelect
        ShortCut = 24643
      end    
      item
        Command = ecLineSelect
        ShortCut = 24652
      end    
      item
        Command = ecTab
        ShortCut = 9
      end    
      item
        Command = ecShiftTab
        ShortCut = 8201
      end    
      item
        Command = ecMatchBracket
        ShortCut = 24642
      end    
      item
        Command = ecColSelUp
        ShortCut = 40998
      end    
      item
        Command = ecColSelDown
        ShortCut = 41000
      end    
      item
        Command = ecColSelLeft
        ShortCut = 40997
      end    
      item
        Command = ecColSelRight
        ShortCut = 40999
      end    
      item
        Command = ecColSelPageDown
        ShortCut = 40994
      end    
      item
        Command = ecColSelPageBottom
        ShortCut = 57378
      end    
      item
        Command = ecColSelPageUp
        ShortCut = 40993
      end    
      item
        Command = ecColSelPageTop
        ShortCut = 57377
      end    
      item
        Command = ecColSelLineStart
        ShortCut = 40996
      end    
      item
        Command = ecColSelLineEnd
        ShortCut = 40995
      end    
      item
        Command = ecColSelEditorTop
        ShortCut = 57380
      end    
      item
        Command = ecColSelEditorBottom
        ShortCut = 57379
      end>
    MouseActions = <>
    MouseTextActions = <>
    MouseSelActions = <>
    Lines.Strings = (
      'swagger: ''2.0'''
      '''200'':'
      '          description: successful operation'
      '          schema:'
      '            type: array'
      '            items:'
      '              $ref: ''#/definitions/Pet'''
      'info:'
      '  description: ''This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'''
      '  version: 1.0.0'
      '  title: Swagger Petstore'
      '  termsOfService: ''http://swagger.io/terms/'''
      '  contact:'
      '    email: apiteam@swagger.io'
      '  license:'
      '    name: Apache 2.0'
      '    url: ''http://www.apache.org/licenses/LICENSE-2.0.html'''
      'host: petstore.swagger.io'
      'basePath: /v2'
      'tags:'
      '  - name: pet'
      '    description: Everything about your Pets'
      '    externalDocs:'
      '      description: Find out more'
      '      url: ''http://swagger.io'''
      '  - name: store'
      '    description: Access to Petstore orders'
      '  - name: user'
      '    description: Operations about user'
      '    externalDocs:'
      '      description: Find out more about our store'
      '      url: ''http://swagger.io'''
      'schemes:'
      '  - http'
      'paths:'
      '  /pet:'
      '    post:'
      '      tags:'
      '        - pet'
      '      summary: Add a new pet to the store'
      '      description: '''''
      '      operationId: addPet'
      '      consumes:'
      '        - application/json'
      '        - application/xml'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: Pet object that needs to be added to the store'
      '          required: true'
      '          schema:'
      '            $ref: ''#/definitions/Pet'''
      '      responses:'
      '        ''405'':'
      '          description: Invalid input'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '    put:'
      '      tags:'
      '        - pet'
      '      summary: Update an existing pet'
      '      description: '''''
      '      operationId: updatePet'
      '      consumes:'
      '        - application/json'
      '        - application/xml'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: Pet object that needs to be added to the store'
      '          required: true'
      '          schema:'
      '            $ref: ''#/definitions/Pet'''
      '      responses:'
      '        ''400'':'
      '          description: Invalid ID supplied'
      '        ''404'':'
      '          description: Pet not found'
      '        ''405'':'
      '          description: Validation exception'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '  /pet/findByStatus:'
      '    get:'
      '      tags:'
      '        - pet'
      '      summary: Finds Pets by status'
      '      description: Multiple status values can be provided with comma separated strings'
      '      operationId: findPetsByStatus'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: status'
      '          in: query'
      '          description: Status values that need to be considered for filter'
      '          required: true'
      '          type: array'
      '          items:'
      '            type: string'
      '            enum:'
      '              - available'
      '              - pending'
      '              - sold'
      '            default: available'
      '          collectionFormat: multi'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            type: array'
      '            items:'
      '              $ref: ''#/definitions/Pet'''
      '        ''400'':'
      '          description: Invalid status value'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '  /pet/findByTags:'
      '    get:'
      '      tags:'
      '        - pet'
      '      summary: Finds Pets by tags'
      '      description: ''Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'''
      '      operationId: findPetsByTags'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: tags'
      '          in: query'
      '          description: Tags to filter by'
      '          required: true'
      '          type: array'
      '          items:'
      '            type: string'
      '          collectionFormat: multi'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            type: array'
      '            items:'
      '              $ref: ''#/definitions/Pet'''
      '        ''400'':'
      '          description: Invalid tag value'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '      deprecated: true'
      '  ''/pet/{petId}'':'
      '    get:'
      '      tags:'
      '        - pet'
      '      summary: Find pet by ID'
      '      description: Returns a single pet'
      '      operationId: getPetById'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: petId'
      '          in: path'
      '          description: ID of pet to return'
      '          required: true'
      '          type: integer'
      '          format: int64'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            $ref: ''#/definitions/Pet'''
      '        ''400'':'
      '          description: Invalid ID supplied'
      '        ''404'':'
      '          description: Pet not found'
      '      security:'
      '        - api_key: []'
      '    post:'
      '      tags:'
      '        - pet'
      '      summary: Updates a pet in the store with form data'
      '      description: '''''
      '      operationId: updatePetWithForm'
      '      consumes:'
      '        - application/x-www-form-urlencoded'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: petId'
      '          in: path'
      '          description: ID of pet that needs to be updated'
      '          required: true'
      '          type: integer'
      '          format: int64'
      '        - name: name'
      '          in: formData'
      '          description: Updated name of the pet'
      '          required: false'
      '          type: string'
      '        - name: status'
      '          in: formData'
      '          description: Updated status of the pet'
      '          required: false'
      '          type: string'
      '      responses:'
      '        ''405'':'
      '          description: Invalid input'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '    delete:'
      '      tags:'
      '        - pet'
      '      summary: Deletes a pet'
      '      description: '''''
      '      operationId: deletePet'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: api_key'
      '          in: header'
      '          required: false'
      '          type: string'
      '        - name: petId'
      '          in: path'
      '          description: Pet id to delete'
      '          required: true'
      '          type: integer'
      '          format: int64'
      '      responses:'
      '        ''400'':'
      '          description: Invalid ID supplied'
      '        ''404'':'
      '          description: Pet not found'
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '  ''/pet/{petId}/uploadImage'':'
      '    post:'
      '      tags:'
      '        - pet'
      '      summary: uploads an image'
      '      description: '''''
      '      operationId: uploadFile'
      '      consumes:'
      '        - multipart/form-data'
      '      produces:'
      '        - application/json'
      '      parameters:'
      '        - name: petId'
      '          in: path'
      '          description: ID of pet to update'
      '          required: true'
      '          type: integer'
      '          format: int64'
      '        - name: additionalMetadata'
      '          in: formData'
      '          description: Additional data to pass to server'
      '          required: false'
      '          type: string'
      '        - name: file'
      '          in: formData'
      '          description: file to upload'
      '          required: false'
      '          type: file'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            $ref: ''#/definitions/ApiResponse'''
      '      security:'
      '        - petstore_auth:'
      '            - ''write:pets'''
      '            - ''read:pets'''
      '  /store/inventory:'
      '    get:'
      '      tags:'
      '        - store'
      '      summary: Returns pet inventories by status'
      '      description: Returns a map of status codes to quantities'
      '      operationId: getInventory'
      '      produces:'
      '        - application/json'
      '      parameters: []'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            type: object'
      '            additionalProperties:'
      '              type: integer'
      '              format: int32'
      '      security:'
      '        - api_key: []'
      '  /store/order:'
      '    post:'
      '      tags:'
      '        - store'
      '      summary: Place an order for a pet'
      '      description: '''''
      '      operationId: placeOrder'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: order placed for purchasing the pet'
      '          required: true'
      '          schema:'
      '            $ref: ''#/definitions/Order'''
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            $ref: ''#/definitions/Order'''
      '        ''400'':'
      '          description: Invalid Order'
      '  ''/store/order/{orderId}'':'
      '    get:'
      '      tags:'
      '        - store'
      '      summary: Find purchase order by ID'
      '      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions'
      '      operationId: getOrderById'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: orderId'
      '          in: path'
      '          description: ID of pet that needs to be fetched'
      '          required: true'
      '          type: integer'
      '          maximum: 10'
      '          minimum: 1'
      '          format: int64'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            $ref: ''#/definitions/Order'''
      '        ''400'':'
      '          description: Invalid ID supplied'
      '        ''404'':'
      '          description: Order not found'
      '    delete:'
      '      tags:'
      '        - store'
      '      summary: Delete purchase order by ID'
      '      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors'
      '      operationId: deleteOrder'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: orderId'
      '          in: path'
      '          description: ID of the order that needs to be deleted'
      '          required: true'
      '          type: integer'
      '          minimum: 1'
      '          format: int64'
      '      responses:'
      '        ''400'':'
      '          description: Invalid ID supplied'
      '        ''404'':'
      '          description: Order not found'
      '  /user:'
      '    post:'
      '      tags:'
      '        - user'
      '      summary: Create user'
      '      description: This can only be done by the logged in user.'
      '      operationId: createUser'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: Created user object'
      '          required: true'
      '          schema:'
      '            $ref: ''#/definitions/User'''
      '      responses:'
      '        default:'
      '          description: successful operation'
      '  /user/createWithArray:'
      '    post:'
      '      tags:'
      '        - user'
      '      summary: Creates list of users with given input array'
      '      description: '''''
      '      operationId: createUsersWithArrayInput'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: List of user object'
      '          required: true'
      '          schema:'
      '            type: array'
      '            items:'
      '              $ref: ''#/definitions/User'''
      '      responses:'
      '        default:'
      '          description: successful operation'
      '  /user/createWithList:'
      '    post:'
      '      tags:'
      '        - user'
      '      summary: Creates list of users with given input array'
      '      description: '''''
      '      operationId: createUsersWithListInput'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - in: body'
      '          name: body'
      '          description: List of user object'
      '          required: true'
      '          schema:'
      '            type: array'
      '            items:'
      '              $ref: ''#/definitions/User'''
      '      responses:'
      '        default:'
      '          description: successful operation'
      '  /user/login:'
      '    get:'
      '      tags:'
      '        - user'
      '      summary: Logs user into the system'
      '      description: '''''
      '      operationId: loginUser'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: username'
      '          in: query'
      '          description: The user name for login'
      '          required: true'
      '          type: string'
      '        - name: password'
      '          in: query'
      '          description: The password for login in clear text'
      '          required: true'
      '          type: string'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            type: string'
      '          headers:'
      '            X-Rate-Limit:'
      '              type: integer'
      '              format: int32'
      '              description: calls per hour allowed by the user'
      '            X-Expires-After:'
      '              type: string'
      '              format: date-time'
      '              description: date in UTC when token expires'
      '        ''400'':'
      '          description: Invalid username/password supplied'
      '  /user/logout:'
      '    get:'
      '      tags:'
      '        - user'
      '      summary: Logs out current logged in user session'
      '      description: '''''
      '      operationId: logoutUser'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters: []'
      '      responses:'
      '        default:'
      '          description: successful operation'
      '  ''/user/{username}'':'
      '    get:'
      '      tags:'
      '        - user'
      '      summary: Get user by user name'
      '      description: '''''
      '      operationId: getUserByName'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: username'
      '          in: path'
      '          description: ''The name that needs to be fetched. Use user1 for testing. '''
      '          required: true'
      '          type: string'
      '      responses:'
      '        ''200'':'
      '          description: successful operation'
      '          schema:'
      '            $ref: ''#/definitions/User'''
      '        ''400'':'
      '          description: Invalid username supplied'
      '        ''404'':'
      '          description: User not found'
      '    put:'
      '      tags:'
      '        - user'
      '      summary: Updated user'
      '      description: This can only be done by the logged in user.'
      '      operationId: updateUser'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: username'
      '          in: path'
      '          description: name that need to be updated'
      '          required: true'
      '          type: string'
      '        - in: body'
      '          name: body'
      '          description: Updated user object'
      '          required: true'
      '          schema:'
      '            $ref: ''#/definitions/User'''
      '      responses:'
      '        ''400'':'
      '          description: Invalid user supplied'
      '        ''404'':'
      '          description: User not found'
      '    delete:'
      '      tags:'
      '        - user'
      '      summary: Delete user'
      '      description: This can only be done by the logged in user.'
      '      operationId: deleteUser'
      '      produces:'
      '        - application/xml'
      '        - application/json'
      '      parameters:'
      '        - name: username'
      '          in: path'
      '          description: The name that needs to be deleted'
      '          required: true'
      '          type: string'
      '      responses:'
      '        ''400'':'
      '          description: Invalid username supplied'
      '        ''404'':'
      '          description: User not found'
      'securityDefinitions:'
      '  petstore_auth:'
      '    type: oauth2'
      '    authorizationUrl: ''http://petstore.swagger.io/oauth/dialog'''
      '    flow: implicit'
      '    scopes:'
      '      ''write:pets'': modify pets in your account'
      '      ''read:pets'': read your pets'
      '  api_key:'
      '    type: apiKey'
      '    name: api_key'
      '    in: header'
      'definitions:'
      '  Order:'
      '    type: object'
      '    properties:'
      '      id:'
      '        type: integer'
      '        format: int64'
      '      petId:'
      '        type: integer'
      '        format: int64'
      '      quantity:'
      '        type: integer'
      '        format: int32'
      '      shipDate:'
      '        type: string'
      '        format: date-time'
      '      status:'
      '        type: string'
      '        description: Order Status'
      '        enum:'
      '          - placed'
      '          - approved'
      '          - delivered'
      '      complete:'
      '        type: boolean'
      '        default: false'
      '    xml:'
      '      name: Order'
      '  Category:'
      '    type: object'
      '    properties:'
      '      id:'
      '        type: integer'
      '        format: int64'
      '      name:'
      '        type: string'
      '    xml:'
      '      name: Category'
      '  User:'
      '    type: object'
      '    properties:'
      '      id:'
      '        type: integer'
      '        format: int64'
      '      username:'
      '        type: string'
      '      firstName:'
      '        type: string'
      '      lastName:'
      '        type: string'
      '      email:'
      '        type: string'
      '      password:'
      '        type: string'
      '      phone:'
      '        type: string'
      '      userStatus:'
      '        type: integer'
      '        format: int32'
      '        description: User Status'
      '    xml:'
      '      name: User'
      '  Tag:'
      '    type: object'
      '    properties:'
      '      id:'
      '        type: integer'
      '        format: int64'
      '      name:'
      '        type: string'
      '    xml:'
      '      name: Tag'
      '  Pet:'
      '    type: object'
      '    required:'
      '      - name'
      '      - photoUrls'
      '    properties:'
      '      id:'
      '        type: integer'
      '        format: int64'
      '      category:'
      '        $ref: ''#/definitions/Category'''
      '      name:'
      '        type: string'
      '        example: doggie'
      '      photoUrls:'
      '        type: array'
      '        xml:'
      '          name: photoUrl'
      '          wrapped: true'
      '        items:'
      '          type: string'
      '      tags:'
      '        type: array'
      '        xml:'
      '          name: tag'
      '          wrapped: true'
      '        items:'
      '          $ref: ''#/definitions/Tag'''
      '      status:'
      '        type: string'
      '        description: pet status in the store'
      '        enum:'
      '          - available'
      '          - pending'
      '          - sold'
      '    xml:'
      '      name: Pet'
      '  ApiResponse:'
      '    type: object'
      '    properties:'
      '      code:'
      '        type: integer'
      '        format: int32'
      '      type:'
      '        type: string'
      '      message:'
      '        type: string'
      'externalDocs:'
      '  description: Find out more about Swagger'
      '  url: ''http://swagger.io'''
    )
    Options = [eoAutoIndent, eoBracketHighlight, eoGroupUndo]
    VisibleSpecialChars = [vscSpace, vscTabAtLast]
    SelectedColor.BackPriority = 50
    SelectedColor.ForePriority = 50
    SelectedColor.FramePriority = 50
    SelectedColor.BoldPriority = 50
    SelectedColor.ItalicPriority = 50
    SelectedColor.UnderlinePriority = 50
    SelectedColor.StrikeOutPriority = 50
    BracketHighlightStyle = sbhsBoth
    BracketMatchColor.Background = clNone
    BracketMatchColor.Foreground = clNone
    BracketMatchColor.Style = [fsBold]
    FoldedCodeColor.Background = clNone
    FoldedCodeColor.Foreground = clGray
    FoldedCodeColor.FrameColor = clGray
    MouseLinkColor.Background = clNone
    MouseLinkColor.Foreground = clBlue
    LineHighlightColor.Background = clNone
    LineHighlightColor.Foreground = clNone
    OnChange = SynEditChange
    inline SynLeftGutterPartList1: TSynGutterPartList
      object SynGutterMarks1: TSynGutterMarks
        Width = 24
        MouseActions = <>
      end
      object SynGutterLineNumber1: TSynGutterLineNumber
        Width = 25
        MouseActions = <>
        MarkupInfo.Background = clBtnFace
        MarkupInfo.Foreground = clNone
        DigitCount = 2
        ShowOnlyLineNumbersMultiplesOf = 1
        ZeroStart = False
        LeadingZeros = False
      end
      object SynGutterChanges1: TSynGutterChanges
        Width = 4
        MouseActions = <>
        ModifiedColor = 59900
        SavedColor = clGreen
      end
      object SynGutterSeparator1: TSynGutterSeparator
        Width = 2
        MouseActions = <>
        MarkupInfo.Background = clWhite
        MarkupInfo.Foreground = clGray
      end
      object SynGutterCodeFolding1: TSynGutterCodeFolding
        MouseActions = <>
        MarkupInfo.Background = clNone
        MarkupInfo.Foreground = clGray
        MouseActionsExpanded = <>
        MouseActionsCollapsed = <>
      end
    end
  end
  object TreeView: TVirtualStringTree
    Left = 16
    Height = 360
    Top = 392
    Width = 1248
    DefaultText = 'Node'
    Header.AutoSizeIndex = 0
    Header.Columns = <    
      item
        Position = 0
        Text = 'Token'
      end    
      item
        Position = 1
        Text = 'Indent'
      end    
      item
        Position = 2
        Text = 'Name'
        Width = 150
      end    
      item
        Position = 3
        Text = 'Offset'
      end    
      item
        Position = 4
        Text = 'Length'
      end    
      item
        Position = 5
        Text = 'fb'
      end    
      item
        Position = 6
        Text = 'Text'
        Width = 400
      end>
    Header.DefaultHeight = 17
    Header.Options = [hoColumnResize, hoDrag, hoShowSortGlyphs, hoVisible]
    TabOrder = 1
    OnFocusChanged = TreeViewFocusChanged
    OnGetText = TreeViewGetText
  end
  object Button1: TButton
    Left = 1280
    Height = 25
    Top = 8
    Width = 73
    Caption = 'Parse'
    OnClick = Button1Click
    TabOrder = 2
  end
  object Button2: TButton
    Left = 1280
    Height = 25
    Top = 48
    Width = 73
    Caption = 'AsXml'
    OnClick = Button2Click
    TabOrder = 3
  end
end
