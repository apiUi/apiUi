<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2007 (http://www.altova.com) by Rabobank Nederland (Rabobank Nederland) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:simpleType name="FileNameType">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:element name="l4jConfig">
		<xs:annotation>
			<xs:documentation>Comment describing your root element</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="L4J_Menu">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="File">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Open_Log4J_Events">
											<xs:annotation>
												<xs:documentation>Opens Log4J event files or archives.

This command will first start a wizard of two steps.
In the first step you specify which files or archives to open.
It is possible to open ansi text files as wel as archives containing ansi text files.

The second step lets you enter a simple searchspec.
The first field is a literal that must exist in a Log4J event to be selected.
Next fields are optional fields where you can enter literals that must exist or must not exist in the event, depending on the checkbox behind the literal.

After confirming the second step, L4J will scan the specified files and/or archives and query all events that match the searchspec.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Save_Log4J_Events">
											<xs:annotation>
												<xs:documentation>Saves the currently content of L4J to a Log4J event file.

Saves the log events shown in L4J for later reference.

On opening such a saved file again, you have the opportunity to filter again.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Exit">
											<xs:annotation>
												<xs:documentation>Exits L4J.

In case you have unsaved changes in configuration, L4J will prompt you to save these changes.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="Edit">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Copy">
											<xs:annotation>
												<xs:documentation>Copies the grid to the clipboard in tab-separated format.

Copies the data shown in the grid to the clipboard in a format that can be pasted to spreadsheet programs (tab-separated data)</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="Search">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Filter">
											<xs:annotation>
												<xs:documentation>Filters the content of L4J, hiding rows that do not match the searchspec.

This command will show the same filter dialog as shown in the scond step of the Open Log4J Events wizard.

After confirming this dialog, L4J will evaluate each event currently present in L4J and hide events that do not match the searchspec.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Find">
											<xs:annotation>
												<xs:documentation>Find a Log4J event that contains a specified string.

Shows a Find dialog. After confirming this dialog, L4J will search the Log4J events accordingly.
In case an event is found, that event will receive focus. If not found, L4J will show a message.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Find_next">
											<xs:annotation>
												<xs:documentation>Find next Log4J event that contains the previously specified string.

L4J will search the next available Log4J events according the previously entered dialog. 
In case an event is found, the found event will receive focus. If not found, L4J will show a message.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="View">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Element_Attribute">
											<xs:annotation>
												<xs:documentation>When empty, L4J will display the focussed event literally in the lower panel.

When filled, L4J will look for the attribute or element in the event to display. An element when the string in enclosed in the Xml 'less than' and 'greater than'</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Wrap_text">
											<xs:annotation>
												<xs:documentation>When checked, text in the lower panel will wrap to a new line when necesarry.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="Extra">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Read_config">
											<xs:annotation>
												<xs:documentation>L4J has a means to configure how to display Cobl data.

This command reads such configuration from a file.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Save_config">
											<xs:annotation>
												<xs:documentation>L4J has a means to configure how to display Cobl data.

This command saves such configuration to a file.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Save_config_as">
											<xs:annotation>
												<xs:documentation>L4J has a means to configure how to display Cobl data.

This command lets you save such configuration after prompting for a filename.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Edit_config">
											<xs:annotation>
												<xs:documentation>L4J has a means to configure how to display Cobl data.

This command opens the build-in edittor and lets you edit this configuration.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Command">
											<xs:annotation>
												<xs:documentation>Executes a shell command.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="Help">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="About">
											<xs:annotation>
												<xs:documentation>Shows the L4J About dialog.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="License">
											<xs:annotation>
												<xs:documentation>Lets you enter a license information.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="DisplayedColumns" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A list of displayed columns.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="DisplayedColumn" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Displayed Column</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Key" type="xs:string">
											<xs:annotation>
												<xs:documentation>The name of the column to display.

Either an Xml element name or an Xml attribute name.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="ColumnHeader" type="xs:string" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Default value taken from Key.

Value is displayed as column header.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Type" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Default  = "Element"

"Attribute", "Element" or "EscXmlElement"</xs:documentation>
											</xs:annotation>
											<xs:simpleType>
												<xs:restriction base="xs:string">
													<xs:enumeration value="Attribute"/>
													<xs:enumeration value="Element"/>
													<xs:enumeration value="EscXmlElement"/>
													<xs:enumeration value="HasString"/>
													<xs:enumeration value="HasXmlValue"/>
												</xs:restriction>
											</xs:simpleType>
										</xs:element>
										<xs:element name="Enabled" type="xs:boolean" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Default "true"

"true" or "false"</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
